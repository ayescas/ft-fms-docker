#!/usr/bin/env bash
##!/bin/bash

# go to working dir
pwd="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || exit 1
cd "$pwd" || exit 1
parent_dir=$(dirname "${pwd}")

# parse config
function get_setting() {
  grep -Ev '^\s*$|^\s*\#' "$2" | grep -E "\s*$1\s*=" | sed 's/.*=//; s/^ //g'
}

function check_setting() {
  if [[ $(wc -l <<<"$1") -gt 1 ]]; then
    echo "multiple values found, 1 expected" >&2
    exit 1
  fi
}

# get settings from config
project_id=$(get_setting "ID" ../.env)
check_setting "$project_id"
[ -z "$project_id" ] && {
  printf "error: project ID empty!\nrun setup_project to set an ID.\n"
  exit 1
}

# check volumes
function check_volumes() {
    printf "WSL linux, checking bind volumes...\n"
    if [ "$(find /mnt/wsl/docker-desktop-bind-mounts/${WSL_DISTRO_NAME}/ -maxdepth 1 -type d | wc -l)" -lt 12 ]; then
        ./_setup_volumes
    fi
}

if [ -f /proc/sys/kernel/osrelease ] && grep -q WSL /proc/sys/kernel/osrelease; then
  check_volumes
else
  echo not WSL
fi

# todo: if WSL  find /mnt/wsl/docker-desktop-bind-mounts/Ubuntu-20.04/ -maxdepth 1 -type d | wc -l -lt 12
# todo: if WSL  find /mnt/wsl/docker-desktop-bind-mounts/${WSL_DISTRO_NAME}/ -maxdepth 1 -type d | wc -l -lt 12
# env WSL_DISTRO_NAME=Ubuntu-20.04
#find /mnt/wsl/docker-desktop-bind-mounts/${WSL_DISTRO_NAME}/ -maxdepth 1 -type d
#cat /var/lib/docker-desktop/mounts.data - mapping container-wsl, nicht für prüfung geeignet

volume_count=$(docker volume ls -q --filter="name=${project_id}$")
if [[ $(wc -l <<<"$volume_count") -ne 11 ]]; then
  echo "setting up volumes"
  ./_setup_volumes || exit 1
fi

# check for docker network fms-net
network=0
docker network ls -q --filter "name=^fms-net$" | grep -q . && network=1
case $network in
0)
  echo "Network fms-net not found, will be created"
  compose_files="-f ../docker-compose.yml -f ../fms-network.yml"
  ;;
1)
  compose_files="-f ../docker-compose.yml"
  ;;
*)
  printf "error while looking for fms docker network: %s" "$(docker network ls -q --filter "name=fms-net")"
  exit 1
  ;;
esac

printf "\nDone. Now starting your server ....\n"
docker-compose $compose_files up -d fms || {
  printf "error while starting fms container\n"
  exit 1
}

printf "\ndone\n"
exit 0
